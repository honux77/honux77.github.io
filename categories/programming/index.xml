<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Honux BBS</title><link>https://honux77.github.io/categories/programming/</link><description>Recent content in programming on Honux BBS</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sat, 05 Dec 2020 03:02:24 +0000</lastBuildDate><atom:link href="https://honux77.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>백기선 자바 스터디 3: 다양한 연산자</title><link>https://honux77.github.io/post/3/</link><pubDate>Sat, 05 Dec 2020 03:02:24 +0000</pubDate><guid>https://honux77.github.io/post/3/</guid><description>Jshell 사용하기 우선순위같은 간단한 코드를 테스트하기엔 Jshell도 좋다. 터미널에서 jshell 또는 IntelliJ에서 tools - run jshell로 실행 가능하다.
우선순위 . [] () : 참조연산자, 배열 첨자, 괄호가 제일 높다! ! ~ &amp;amp; | ^ - ++ --: 단항연산자도 우선순위가 높다. 부정 &amp;gt; bit &amp;gt; 부호 &amp;gt; 증감 순으로 우선순위를 가진다. 쉬프트 연산자: 산술보다 쉬프트 연산자가 우선순위가 높다. 산술연산자 비교연산자 논리연산자 삼항연산자 대입연산자 조금 복잡하지만 단항 &amp;gt; 산술 &amp;gt; 비교 &amp;gt; 논리 &amp;gt; 삼항 &amp;gt; 대입이기 때문에 자연스럽다!</description></item><item><title>백기선 자바 스터디 1: JVM과 자바 실행</title><link>https://honux77.github.io/post/1-jvm/</link><pubDate>Tue, 17 Nov 2020 02:36:47 +0000</pubDate><guid>https://honux77.github.io/post/1-jvm/</guid><description>Java Virtual Machine (JVM) [위키 링크](https://en.wikipedia.org/wiki/Java_virtual_machine_ 자바 프로그램을 실행할 수 있는 가상 머신 바이트코드로 컴파일할수 있는 다른 프로그래밍 언어(Kotlin, Groovy) 도 실행할 수 있다. JVM 위에서 돌아가는 프로그래밍 언어도 만들 수 있을 것 같다. 유튜브 링크 .java 컴파일 터미널에서 컴파일하는 방법이 가장 간단 javac &amp;lt;옵션&amp;gt; &amp;lt;소스파일&amp;gt; 유용한 옵션 javac --help 로 옵션을 확인할 수 있다.
--class-path &amp;lt;path&amp;gt;, -classpath &amp;lt;path&amp;gt;, -cp &amp;lt;path&amp;gt; Specify where to find user class files and annotation processors -d &amp;lt;directory&amp;gt; Specify where to place generated class files -g Generate all debugging info --help, -help, -?</description></item><item><title>RFC 읽고 GitHub Oauth2 인증 구현해 보기</title><link>https://honux77.github.io/post/rfc-github-oauth2/</link><pubDate>Mon, 16 Nov 2020 12:35:47 +0000</pubDate><guid>https://honux77.github.io/post/rfc-github-oauth2/</guid><description>최근 강의 준비를 위해 RFC6749를 읽었다.
생각보다 설명이 잘 되어 있고 읽기가 편한 편이다.
시험 삼아 별도 모듈 없이 직접 node.js + express로 구현을 해 봤다. 다행히 잘 된다.
인증 과정 요약 GitHub(Authentication Server) 에서 제공하는 url을 통해 **사용자(resource owner)**는 **서비스(client)**가 scope로 미리 정의한 요청 권한을 직접 확인하고 grant한다. 결과물로 authorization code가 나온다. 서비스는 callback URL을 통해 사용자로부터 전달받은 code에 client id, secret을 함께 묶어서 인증 서버로 보내면 access token을 얻을 수 있다.</description></item></channel></rss>