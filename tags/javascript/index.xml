<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on Honux BBS</title><link>https://honux77.github.io/tags/javascript/</link><description>Recent content in javascript on Honux BBS</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Tue, 15 Dec 2020 16:11:07 +0000</lastBuildDate><atom:link href="https://honux77.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>JS 클래스와 TS static 키워드에 대한 짧은 고찰</title><link>https://honux77.github.io/post/js-ts-static/</link><pubDate>Tue, 15 Dec 2020 16:11:07 +0000</pubDate><guid>https://honux77.github.io/post/js-ts-static/</guid><description>요즘 인프런 캡틴 팡요님의 TS강의를 듣고 있다가 생각나서 짧게 정리해 보았다.
예전에 ES6의 클래스 문법을 사용하면서, 기존 자바에서 사용하던 static 메소드와 static 변수를 사용하고 싶었는데, 잘 되지 않았던 기억이 있었다.
이 문제를 해결하기 위한 아이디어가 갑자기 떠올랐는데, TS로 코딩을 하고 컴파일을 해서 생성된 코드를 보는 것이다!
먼저 TS에는 당연히 static 메소드와 static 변수가 있으니까 이를 이용해서 코드를 짜 보았다.
class Dog { public name: string; private age: number; public static numTail: number; constructor(name, age) { this.</description></item><item><title>RFC 읽고 GitHub Oauth2 인증 구현해 보기</title><link>https://honux77.github.io/post/rfc-github-oauth2/</link><pubDate>Mon, 16 Nov 2020 12:35:47 +0000</pubDate><guid>https://honux77.github.io/post/rfc-github-oauth2/</guid><description>최근 강의 준비를 위해 RFC6749를 읽었다.
생각보다 설명이 잘 되어 있고 읽기가 편한 편이다.
시험 삼아 별도 모듈 없이 직접 node.js + express로 구현을 해 봤다. 다행히 잘 된다.
인증 과정 요약 GitHub(Authentication Server) 에서 제공하는 url을 통해 **사용자(resource owner)**는 **서비스(client)**가 scope로 미리 정의한 요청 권한을 직접 확인하고 grant한다. 결과물로 authorization code가 나온다. 서비스는 callback URL을 통해 사용자로부터 전달받은 code에 client id, secret을 함께 묶어서 인증 서버로 보내면 access token을 얻을 수 있다.</description></item></channel></rss>