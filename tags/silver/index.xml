<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>silver on Honux BBS</title><link>https://honux77.github.io/tags/silver/</link><description>Recent content in silver on Honux BBS</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Tue, 29 Sep 2020 13:13:00 +0900</lastBuildDate><atom:link href="https://honux77.github.io/tags/silver/index.xml" rel="self" type="application/rss+xml"/><item><title>알고리즘 - BOJ 10814 나이순 정렬</title><link>https://honux77.github.io/post/algorithm-200929/</link><pubDate>Tue, 29 Sep 2020 13:13:00 +0900</pubDate><guid>https://honux77.github.io/post/algorithm-200929/</guid><description>BOJ BOJ 10814 나이순 정렬 문제는 간단한 정렬문제이다.
다만 기본 정렬인 퀵정렬은 불안전 정렬이기 때문에 안정정렬을 사용해야 한다.
실패 분석 출력이 많은데 endl을 사용하면 시간초과가 발생한다. 그 사실을 모르고 복잡도 때문인지 알고 카운팅 소트를 구현해서 사용했다. 안정 정렬 구현 코드 #include &amp;lt;cstdio&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;algorithm&amp;gt; using namespace std; using i64 = long long int; struct People { int age; string name; }; bool cmp(const People &amp;amp;a, const People &amp;amp;b) { return a.</description></item><item><title>알고리즘 - BOJ 10972 다음 순열</title><link>https://honux77.github.io/post/algorithm-200905/</link><pubDate>Sat, 05 Sep 2020 15:23:57 +0900</pubDate><guid>https://honux77.github.io/post/algorithm-200905/</guid><description>BOJ BOJ 10972 다음 순열 문제는 말 그대로 사전순으로 다음 순열을 찾는 문제다.
일종의 Brute force 문제인데, 구현이 쉽지 않았다.
아이디어 단계 1 역순 정렬되어 있으면 다음 순열이 없으므로 -1 을 출력한다. 처음 바꿔야 하는 숫자를 뒤에서 앞으로 순회하며 찾는다. 대상은 자신의 값이 뒷자리보다 작은 숫자 예1: 1, 2, 3, [4], 5 라면 4가 해당 예2: 1, [2], 5, 4, 3 이라면 2가 해당 단계 2 이번에는 찾은 숫자 a와 바꿀 숫자 b를 다시 뒤에서부터 찾는다.</description></item></channel></rss>